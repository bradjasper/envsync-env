=Caveats and solutions=
When working in the split screen configuration, vim is run under a gnu screen
session. gnu screen itself runs inside a terminal emulator, e.g. konsole. Both
gnu screen and the terminal it is run in can cause various problems. The
problems described here generally do not apply to the seperate windows
configuration (which is invoked by the gvimPython.bash script). They only apply
to the split screen configuration, that is invoked by the vimPython.bash
script.

Keyboard shortcuts
==================
gnome-terminal and konsole trap some keyboard shortcuts. I guess that other
terminal emulators do as well.  gnu screen also traps some keyboard shortcuts,
and re-encodes others. That could prevent you from using e.g. Ctrl-PageUp to
switch tabs when running vim under screen in gnome-terminal.

While it is possible to remap *some* of the keys konsole and gnome-terminal
trap, I didn't find a way to remap *all* the trapped special keys. Examples
include Shift-Home under gnome-terminal and Shift-Right under konsole. The only
solution I found for that problem was to use another terminal emulator, i.e.
xterm. Under ubuntu you can use the following to invoke xterm with black on
white fonts:
xterm -fg black -bg white -fn "-*-dejavu sans mono-medium-r-normal-*-14-*-*-*-m-*-*-*"
Now run the vimPython.bash script from within the xterm window.

As for re-encoding keycodes by gnu screen, it can be circumvented by using vim's
map commands. To find out how screen encods a specific key combination, go to
command mode (:), press Ctrl-k then your key combination of interest (e.g. Shift
Right). Vim will write the code ([1;2C in that example). Now use the map command
to assign the key of interest to that sequence. Don't forget to add <Esc> before
the sequence. To follow the example:
:map <Esc>[1;2C <S-Right>

You can find my .vimrc in ~/.vim/reference/pimp. It contains the mappings for
the most common special keys combinations.

Refer to https://bugs.launchpad.net/ubuntu/+source/screen/+bug/82708 for more
information.

Vim Colors
==========
Though most modern terminals (gnome-terminal, konsole, xterm) support 256
colors, they fail to communicate that fact. Gnu screen might also cause some
problems in that area. If you use the CSApprox plugin (vimscript #2390) you
might need to do some tweaks to get it working. 

First, to make screen recognize support for 'many' colors, you have to add some
lines to your ~/.screenrc file. You can find my .screenrc file in
~/.vim/reference/pimp. Refer to http://frexx.de/xterm-256-notes/ for more
details.

To make vim recognize that your terminal supports colors, you might have to add
the line
set t_Co=256
to your .vimrc file.

Furthermore, to use the CSApprox plugin you need gui support compiled into vim.
Under Fedora 9 I had to invoke 'gvim -v' instead of 'vim' in the vimPython.bash
script.

Refer to http://www.linuxquestions.org/questions/linux-software-2/gnu-screen-wont-do-256-colors-with-xterm-rxvt-mrxvt-583880/
and to the documentation for the CSApprox script for more details.

IPython Colors
==============
IPython is also run in a screen session, so the information in the 'Vim Colors'
section is relevant here as well. In addition, IPython by default (at least on
ubuntu and fedora) works with a color scheme which is appropriate for dark
background. If you prefer using a light background, there is an option to
change IPython's color scheme. From within IPython, try '%colors LightBG'. If
you'd like it to be set on a permanent basis, it can be done in
~/.ipython/ipy_user_conf.py. You can find my ipy_user_conf.py in
/.vim/reference/pimp.

Split screen layout is incorrect
================================
If when starting up the split screen configuration your screen does not look as
it does in the screenshots (e.g. both vim and ipython occupy the top window, or
there is only one window), it's probably caused by gnu screen's asynchronous
execution. Try using a larger delay in the vimPython.bash script (change the
line with the sleep command to e.g. sleep 0.4s).

IPython limitations
===================
The version of IPython that I use (0.8.4) has a bug (feature?) regarding the
magic command %run.  It can either accept the '-i' option which causes the script
to run in the current namespace but with the __name__ variable set to '__main__',
*or* use the '-n' option which causes the script to run in an empty environment
but the __name__ variable is set to something different than '__main__'. 

The result is that either the script has access to the current state of the
python interpreter but is running the 'main' code, or the script does not have
access to the current namespace but code protected under "if __name__ ==
'__main__'" will not run.

I chose to use the -i option, so code in the script can access the current
IPython environment. In order to prevent code protected under __name__ ==
'__main__' from running, the __name__ variable is set to some other (possibly
random and subject to change in a future version of pimp) string before the 
script is run. I reckon that this is more or less the desired behavior.

